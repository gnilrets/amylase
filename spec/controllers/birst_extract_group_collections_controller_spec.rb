require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BirstExtractGroupCollectionsController, :type => :controller do

  def construct_associated_attributes(model, association_ids)
    attributes = model.attributes.with_indifferent_access
    attributes[association_ids] = model.send(association_ids)
    attributes
  end

  # This should return the minimal set of attributes required to create a valid
  # BirstExtractGroupCollection. As you add validations to BirstExtractGroupCollection, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    valid_build = FactoryGirl.build(:birst_extract_group_collection, :with_existing_groups)
    construct_associated_attributes(valid_build, :birst_extract_group_ids)
  }

  let(:invalid_attributes) {
    # An invalid record is one where the same name already exists
    valid_build = FactoryGirl.create(:birst_extract_group_collection).attributes
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BirstExtractGroupCollectionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all birst_extract_group_collections as @birst_extract_group_collections" do
      birst_extract_group_collection = BirstExtractGroupCollection.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:birst_extract_group_collections)).to eq([birst_extract_group_collection])
    end
  end

  describe "GET show" do
    it "assigns the requested birst_extract_group_collection as @birst_extract_group_collection" do
      birst_extract_group_collection = BirstExtractGroupCollection.create! valid_attributes
      get :show, {:id => birst_extract_group_collection.to_param}, valid_session
      expect(assigns(:birst_extract_group_collection)).to eq(birst_extract_group_collection)
    end
  end

  describe "GET new" do
    it "assigns a new birst_extract_group_collection as @birst_extract_group_collection" do
      get :new, {}, valid_session
      expect(assigns(:birst_extract_group_collection)).to be_a_new(BirstExtractGroupCollection)
    end
  end

  describe "GET edit" do
    it "assigns the requested birst_extract_group_collection as @birst_extract_group_collection" do
      birst_extract_group_collection = BirstExtractGroupCollection.create! valid_attributes
      get :edit, {:id => birst_extract_group_collection.to_param}, valid_session
      expect(assigns(:birst_extract_group_collection)).to eq(birst_extract_group_collection)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new BirstExtractGroupCollection" do
        expect {
          post :create, {:birst_extract_group_collection => valid_attributes}, valid_session
        }.to change(BirstExtractGroupCollection, :count).by(1)
      end

      it "assigns a newly created birst_extract_group_collection as @birst_extract_group_collection" do
        post :create, {:birst_extract_group_collection => valid_attributes}, valid_session
        expect(assigns(:birst_extract_group_collection)).to be_a(BirstExtractGroupCollection)
        expect(assigns(:birst_extract_group_collection)).to be_persisted
      end

      it "redirects to the created birst_extract_group_collection" do
        post :create, {:birst_extract_group_collection => valid_attributes}, valid_session
        expect(response).to redirect_to(BirstExtractGroupCollection.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved birst_extract_group_collection as @birst_extract_group_collection" do
        post :create, {:birst_extract_group_collection => invalid_attributes}, valid_session
        expect(assigns(:birst_extract_group_collection)).to be_a_new(BirstExtractGroupCollection)
      end

      it "re-renders the 'new' template" do
        post :create, {:birst_extract_group_collection => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      before do
        @birst_extract_group_collection = BirstExtractGroupCollection.create! valid_attributes

        # Remove an extract group from the collection
        @updated_attributes = construct_associated_attributes(@birst_extract_group_collection, :birst_extract_group_ids)
        @updated_attributes[:birst_extract_group_ids].pop
      end

      it "updates the requested birst_extract_group_collection" do
        expect {
          put :update, {:id => @birst_extract_group_collection.to_param, :birst_extract_group_collection => @updated_attributes}, valid_session
        }.to change { @birst_extract_group_collection.birst_extract_groups.count }.by(-1)
      end

      it "assigns the requested birst_extract_group_collection as @birst_extract_group_collection" do
        put :update, {:id => @birst_extract_group_collection.to_param, :birst_extract_group_collection => @updated_attributes}, valid_session
        expect(assigns(:birst_extract_group_collection)).to eq(@birst_extract_group_collection)
      end

      it "redirects to the birst_extract_group_collection" do
        put :update, {:id => @birst_extract_group_collection.to_param, :birst_extract_group_collection => @updated_attributes}, valid_session
        expect(response).to redirect_to(@birst_extract_group_collection)
      end
    end

    describe "with invalid params" do
      it "assigns the birst_extract_group_collection as @birst_extract_group_collection" do
        birst_extract_group_collection = BirstExtractGroupCollection.create! valid_attributes
        put :update, {:id => birst_extract_group_collection.to_param, :birst_extract_group_collection => invalid_attributes}, valid_session
        expect(assigns(:birst_extract_group_collection)).to eq(birst_extract_group_collection)
      end

      it "re-renders the 'edit' template" do
        birst_extract_group_collection = BirstExtractGroupCollection.create! valid_attributes
        put :update, {:id => birst_extract_group_collection.to_param, :birst_extract_group_collection => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested birst_extract_group_collection" do
      birst_extract_group_collection = BirstExtractGroupCollection.create! valid_attributes
      expect {
        delete :destroy, {:id => birst_extract_group_collection.to_param}, valid_session
      }.to change(BirstExtractGroupCollection, :count).by(-1)
    end

    it "redirects to the birst_extract_group_collections list" do
      birst_extract_group_collection = BirstExtractGroupCollection.create! valid_attributes
      delete :destroy, {:id => birst_extract_group_collection.to_param}, valid_session
      expect(response).to redirect_to(birst_extract_group_collections_url)
    end
  end

end
